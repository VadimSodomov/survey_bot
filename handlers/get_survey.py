import telebot.types

from functions.database_funcs import get_questions_answered_user_db, get_questions_for_user_db, \
    get_last_answered_question_db, get_current_question_db, get_current_choices, add_user_vote_db
from handlers.user import States
from init_bot import bot
from keyboards.inline import get_start_survey_keyboard, get_continue_survey_keyboard, get_choices_markup


@bot.callback_query_handler(func=lambda callback: callback.data == "get_survey")
def get_survey(callback: telebot.types.CallbackQuery):
    answered_questions = get_questions_answered_user_db(telegram_id=callback.from_user.id) #–ø–æ–ª—É—á–∏—Ç—å id –≤–æ–ø—Ä–æ—Å–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–Ω—ã—Ö –∏–∑ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    questions = get_questions_for_user_db(answered_questions) #–ø–æ–ª—É—á–∏—Ç—å –Ω–µ–æ—Ç–≤–µ—á–µ–Ω–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã
    all_questions = get_questions_for_user_db()
    if questions:
        if answered_questions:
            markup = get_continue_survey_keyboard()
            bot.send_message(
                callback.message.chat.id,
                f'–†–∞–Ω–µ–µ —Ç—ã —É–∂–µ –æ—Ç–≤–µ—Ç–∏–ª –Ω–∞ {len(answered_questions)}/{len(all_questions)} –≤–æ–ø—Ä–æ—Å–æ–≤ üòâ',
                reply_markup=markup
            )
        else:
            markup = get_start_survey_keyboard()
            bot.send_message(
                callback.message.chat.id,
                f'–û–ø—Ä–æ—Å —Å–æ—Å—Ç–æ–∏—Ç –∏–∑ {len(questions)} –≤–æ–ø—Ä–æ—Å–æ–≤) –ë—É–¥–µ–º —Ä–∞–¥—ã –≤–∞—à–µ–º—É –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—é! ‚ò∫',
                reply_markup=markup
            )
    else:
        bot.send_message(
            callback.message.chat.id,
            '–¢—ã –æ—Ç–≤–µ—Ç–∏–ª –Ω–∞ –≤—Å–µ –≤–æ–ø—Ä–æ—Å—ã üëç\n–°–ø–∞—Å–∏–±–æ –∑–∞ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ –æ–ø—Ä–æ—Å–∞! üòâ'
        )
        bot.delete_state(callback.from_user.id, callback.message.chat.id)


def send_question(user_id, chat_id, message_id):
    cnt_answered, last = get_last_answered_question_db(telegram_id=user_id)
    current_question = get_current_question_db(last)  # {id:, text:}
    if current_question:
        current_choices = get_current_choices(current_question["id"])  # -> ["id, text", ]
        markup = get_choices_markup(choices=current_choices)  # template_call_data: "number, answer"
        bot.edit_message_reply_markup(chat_id=chat_id, message_id=message_id, reply_markup=None)
        bot.send_message(
            text=f'üî∏ {cnt_answered + 1}. {current_question["text"]}',
            chat_id=chat_id,
            reply_markup=markup
        )
    else:
        bot.edit_message_reply_markup(chat_id=chat_id, message_id=message_id, reply_markup=None)
        bot.send_message(
            chat_id,
            '–¢—ã –æ—Ç–≤–µ—Ç–∏–ª –Ω–∞ –≤—Å–µ –≤–æ–ø—Ä–æ—Å—ã üëç\n–°–ø–∞—Å–∏–±–æ –∑–∞ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ –æ–ø—Ä–æ—Å–∞! üòâ'
        )
        bot.delete_state(user_id, chat_id)


@bot.callback_query_handler(func=lambda callback: callback.data == "start_survey")
def start_survey(callback: telebot.types.CallbackQuery):
    send_question(callback.from_user.id, callback.message.chat.id, callback.message.id)
    bot.set_state(callback.from_user.id, States.user_on_survey, callback.message.chat.id)


@bot.callback_query_handler(state=States.user_on_survey, func=lambda callback: callback.data[0] == "c")
def survey(callback: telebot.types.CallbackQuery):
    answer_id = int(callback.data[1:])
    add_user_vote_db(choice_id=answer_id, telegram_id=callback.from_user.id)
    send_question(callback.from_user.id, callback.message.chat.id, callback.message.id)
